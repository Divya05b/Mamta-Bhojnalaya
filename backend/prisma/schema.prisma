datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  phone     String?
  address   String?
  city      String?
  state     String?
  pincode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart?
  testimonials Testimonial[]
}

model MenuItem {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    String
  image       String?
  isAvailable Boolean    @default(true)
  isVegetarian Boolean  @default(false)
  isSpicy     Boolean  @default(false)
  isSignatureDish Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  status        String      @default("pending")
  total         Float
  address       String
  phone         String
  items         OrderItem[]
  paymentMethod String      @default("COD")
  orderType     String      @default("takeaway")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Float
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      @default(5)
  comment   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 